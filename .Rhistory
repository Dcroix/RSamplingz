?Yamane95
library(RSamplingz)
?Yamane95
?Smean
Smean(1.96, 0.69, 0.05)
Smean(1.96, 0.11, 0.05)
Smean(1.96, 1.2, 0.05)
Smean(1.96, 1.2, 0.01)
Smean(1.96, 0.11, 0.01)
Smean(1.96, 01.2, 0.5)
Smean(1.96, 1.2, 0.5)
Smean(1.96, 1.2, 0.04)
Smean(1.96, 0.51, 0.04)
devtools::load_all(".")
library(RSamplingz)
install.packages("Rtools")
library(RSamplingz)
?xlsx
packageDescription("xlsx")
library(RSamplingz)
?sampledlist
library(RSamplingz)
?sampleElements
?sampleElements
?sampleElements
library(RSamplingz)
?sampleElements
q()
library(RSamplingz)
sampleElements("NamesList", "Names", 150, 15, 1)
getwd()
list.files(patter = "*.csv")
sampleElements("NamesList.xlsx", "Names", 150, 15, 1)
sampleElements("NamesList.xlsx", "Names", 150, 15, 1)
sampleElements("NamesList.xlsx", "Names", 150, 15, 1)
q()
library(RSamplingz)
library(RSamplingz)
devtools::load_all("C:/R Files/RSamplingz")
devtools::load_all("C:/R Files/RSamplingz")
?Yamane95
devtools::load_all("C:/R Files/RSamplingz")
q()
library(RSamplingz)
library(RSamplingz)
?sampleElements
library(RSamplingz)
sysElements("NamesList.xlsx", "Names", 150, 15, 1)
getwd()
setwd("C:/R Files/Practice")
getwd()
sysElements("NamesList.xlsx", "Names", 150, 15, 1)
library(RSamplingz)
?sysElements
library(RSamplingz)
library(RSamplingz)
?sysElements
library(RSamplingz)
q()
q()
q()
q()
?pnorm
pnorm(70, 80, 10, lower.tail = 1)
qnorm(95, 1100, 75, lower.tail = 1)
qnorm(95, 1100, 75, lower.tail = 0)
qnorm(95, 1100, 75, lower.tail = 1, rm.na=1)
qnorm(0.95, 1100, 75, lower.tail = 1)
qnorm(0.95, 1100, 7.5, lower.tail = 1)
qnorm(0.95, 1100, 75/10, lower.tail = 1)
?pbinom
pbinom(4,5,0.5, lower.tail = 1)
pbinom(3,5,0.5, lower.tail = 1)
pbinom(4,5,0.5, lower.tail = 0)
?ppois
ppois(10, 15, lower.tail = 1)
pnorm(70, 80, 10, lower.tail = 1)
qnorm(0.95, 1100, 75, lower.tail = 1)
qnorm(0.95, 1100, 7.5, lower.tail = 1)
pbinom(3, 5, lower.tail = 0)
pbinom(3, 5, 0.5, lower.tail = 0)
ppois(15, 10, lower.tail = 1)
?rpois
rpois(10, 15, lower.tail = 1)
ppois(10, 15, lower.tail = 1)
q()
library(RSamplingz)
packageDescription("RSamplingz")
library(RSamplingz)
?Smean
?smean
library(RSamplingz)
?Smean
# This file is part of the RSamplingz package with License GPL-3.0-or-later
Yamane <- function(x,y){
a <- x/(1 + x*y^2)
b <- ceiling(a)
print(b)
}
Yamane(500,0.05)
Yamane95(500)
library(RSamplingz)
Yamane95(500)
Yamane(500,0.01)
Yamane99(500)
library(RSamplingz)
library(RSamplingz)
?Yamane
?Yamane
library(RSamplingz)
rm(list = ls())
library(RSamplingz)
?Yamane
library(RSamplingz)
packageDescription("RSamplingz")
x <- c("42", "18", "10")
x
x <- c(42, 18, 10)
x
str(x)
library(RSamplingz)
SRRprop95(70, x)
Yamane95(70)
a <- SRRprop95(70, x)
sum(a)
x <- c(345, 426, 159)
sum(x)
SRRprop <- data.frame(x)
SRRprop
colnames(SRRprop) <- "Population"
SRRprop
x <- runif(30, 155, 689)
x
x <- round(x, digits = 0)
x
length(x)
x <- data.frame(x)
colnames(x) <- Population
x
colnames(x) <- "Population"
head(x)
sum(x$Population)
SRRprop95(12928, x$Population)
Sample <- SRRprop95(12928, x$Population)
Sample
sum(Sample)
Yamane95(sum(x$Population))
z <- cbind(x, Sample)
x
z
head(x)
write.csv(x, file = "SRRPropCase2.csv")
library(RSamplingz)
?Smean
library(RSamplingz)
?Smean
packageDescription("RSamplingz")
NPM <- function(zalpha,zpower,sd,delta){
a <- zalpha + zpower
a <- a*a
b <- sd*sd
c <- 2*a*b
n <- c / (delta*delta)
print(n)
}
NPM(1.96, 1.282, 50, 10)
power.t.test(sig.level = 0.05, power = .8, delta = 10, sd=50)
NPM(1.96, 0.842, 50, 10)
?qt
qnorm
?qnorm
qnorm(.975)
1-(.05/2)
qnomr(.8)
qnorm(.8)
NPM <- function(alpha,power,sd,delta){
a <- qnorm(1-(alpha/2))
p <- qnorm(power)
x <- a + p
x <- x*x
b <- sd*sd
c <- 2*x*b
n <- c / (delta*delta)
print(n)
}
NPM(0.05, .8, 50, 10)
NPM <- function(alpha,power,sd,delta){
a <- qnorm(1-(alpha/2))
p <- qnorm(power)
x <- a + p
x <- x*x
b <- sd*sd
c <- 2*x*b
n <- c / (delta*delta)
n <- ceiling(n)
print(n)
}
NPM(0.05, .8, 50, 10)
NPM <- function(alpha,power,sd,delta){
a <- qnorm(1-(alpha/2))
p <- qnorm(power)
x <- a + p
x <- x*x
b <- sd*sd
c <- 2*x*b
n <- c / (delta*delta)
n <- ceiling(n)
ans <- paste(n, "each group")
print(ans)
}
NPM(0.05, .8, 50, 10)
NPM(0.05, .8, 25, 15)
power.t.test(sig.level = .05, power = .8, delta = 15, sd=15)
power.t.test(sig.level = .05, power = .8, delta = 10, sd=50)
NPM(0.05, .8, 10, 50)
NPM(0.05, .8, 50, 10)
NPM(0.05, .8, 25, 15)
NPM(0.05, .8, 15, 25)
NPM(0.05, .8, 25, 15)
power.t.test(sig.level = .05, power = .8, delta = 15, sd=25)
NPM <- function(alpha,power,sd,delta){
a <- qnorm(1-(alpha/2))
p <- qnorm(power)
x <- a + p
x <- x*x
b <- sd*sd
c <- 2*x*b
n <- c / (delta*delta)
n <- ceiling(n)
ans <- paste(n, "each group")
print(ans)
NPM <- function(alpha,power,sd,delta){
a <- qnorm(1-(alpha/2))
p <- qnorm(power)
x <- a + p
x <- x*x
b <- sd*sd
c <- 2*x*b
n <- c / (delta*delta)
n <- ceiling(n)
ans <- paste(n, "each group")
print(ans)
}
NPM <- function(alpha,power,sd,delta){
a <- qnorm(1-(alpha/2))
p <- qnorm(power)
x <- a + p
x <- x*x
b <- sd*sd
c <- 2*x*b
n <- c / (delta*delta)
n <- ceiling(n)
ans <- paste(n, "each group")
print(ans)
}
NPM(0.05, .8, 25, 15)
NPM <- function(alpha,power,sd,delta){
a <- qnorm(1-(alpha/2))
p <- qnorm(power)
x <- a + p
x <- x*x
b <- sd*sd
c <- 2*x*b
n <- c / (delta*delta)
n <- ceiling(n)
}
NPM(0.05, .8, 25, 15)
NPM
NPM <- function(alpha,power,sd,delta){
a <- qnorm(1-(alpha/2))
p <- qnorm(power)
x <- a + p
x <- x*x
b <- sd*sd
c <- 2*x*b
n <- c / (delta*delta)
n <- ceiling(n)
print(n)
}
NPM(0.05, .8, 25, 15)
NPM <- function(alpha,power,sd,delta){
a <- qnorm(1-(alpha/2))
p <- qnorm(power)
x <- a + p
x <- x*x
b <- sd*sd
c <- 2*x*b
n <- c / (delta*delta)
print(n)
}
NPM(0.05, .8, 25, 15)
25*25
NPM(0.05, .9, 28, 13)
NPM <- function(alpha,power,sd,delta){
a <- qnorm(1-(alpha/2))
p <- qnorm(power)
x <- a + p
x <- x*x
b <- sd*sd
c <- 2*x*b
n <- c / (delta*delta)
n <- ceiling(n)
ans <- paste(n, "each group")
print(ans)
}
NPM(0.05, .9, 28, 13)
28*28
nPM <- function(alpha,power,sd,delta){
a <- qnorm(1-(alpha/2))
p <- qnorm(power)
x <- a + p
x <- x*x
b <- sd*sd
c <- 2*x*b
n <- c / (delta*delta)
n <- ceiling(n)
ans <- paste(n, "each group")
print(ans)
}
nPM(.05, .8, 15, 20)
nPM(.05, .9, 15, 20)
nPP <- function(alpha,power,proportion,delta){
a <- qnorm(1-(alpha/2))
p <- qnorm(power)
x <- a + p
x <- x*x
b <- proportion*(1-proportion)
c <- 2*x*b
n <- c / (delta*delta)
n <- ceiling(n)
ans <- paste(n, "each group")
print(ans)
}
nPP(.05,.4, 60, 40)
nPP(.05,.95, 60, 40)
nPP(.05,.95, .60, 40)
nPP <- function(alpha,power,proportion,delta){
a <- qnorm(1-(alpha/2))
p <- qnorm(power)
x <- a + p
x <- x*x
b <- proportion*(100-proportion)
c <- 2*x*b
n <- c / (delta*delta)
n <- ceiling(n)
ans <- paste(n, "each group")
print(ans)
}
nPP(.05,.95, 60, 40)
nPP(.05,.9, 70, 15)
nPP(.05,.9, 70, 1)
nPP(.05,.9, 70, 2.5)
nPP(.05,.9, 70, 430)
nPP(.05,.9, 70, 30)
nPM(.05,.9, 4, 2)
q()
nPM <- function(alpha,power,sd,delta){
a <- qnorm(1-(alpha/2))
p <- qnorm(power)
x <- a + p
x <- x*x
b <- sd*sd
c <- 2*x*b
n <- c / (delta*delta)
n <- ceiling(n)
ans <- paste(n, "each group")
print(ans)
}
nPM(0.05, 0.8, 2.5, 1.2)
x <- nPM(0.05, 0.8, 2.5, 1.2)
str(x)
nPM(0.05, 0.8, 50, 10)
nPM(0.05, 0.8, .30, .15)
library(RSamplingz)
rm(list=ls())
library(RSamplingz)
?nPM
?nPP
?Cochran
?nPM
library(RSamplingz)
?nPM
?nPP
?nPM
##Computing for sample size using power and mean
nPM(0.05, 0.8, 50, 10)
?nPP
nPP(.05, .8, .3, .15)
nPP(.05, .8, .5, .15)
nPP(.05, .8, .5, .05)
nPP(.05, .8, 50, 12)
library(RSamplingz)
q()
